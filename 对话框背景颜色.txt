::SetWindowLong( m_hWnd, GWL_EXSTYLE, GetWindowLong(m_hWnd, GWL_EXSTYLE) | WS_EX_LAYERED);  
::SetLayeredWindowAttributes( m_hWnd, 0, 200, LWA_ALPHA); // 120是透明度，范围是0～255  

else
	{
		CDialogEx::OnPaint();
		//CPaintDC   dc(this);   
		//CRect   rect;   
		//GetClientRect(&rect);                                 //获取对话框长宽       
		//CDC   dcBmp;                                           //定义并创建一个内存设备环境
		//dcBmp.CreateCompatibleDC(&dc);                         //创建兼容性DC
		//CBitmap   bmpBackground;   
		//bmpBackground.LoadBitmap(IDB_BITMAP1);                 //载入资源中的IDB_BITMAP1图片
		//BITMAP   m_bitmap;                                     //图片变量                
		//bmpBackground.GetBitmap(&m_bitmap);                    //将图片载入位图中
		//CBitmap   *pbmpOld=dcBmp.SelectObject(&bmpBackground); //将位图选入临时内存设备环境  
		////调用函数显示图片 StretchBlt显示形状可变
		//dc.StretchBlt(0,0,rect.Width(),rect.Height(),&dcBmp,0,0,
		//	m_bitmap.bmWidth,m_bitmap.bmHeight,SRCCOPY);   
	}

按钮 颜色
COLORREF dd=GetSysColor(COLOR_3DFACE);
	BYTE r=GetRValue(dd);
	BYTE g=GetGValue(dd);
	BYTE b=GetBValue(dd);
	//m_btn.SubclassDlgItem(IDC_ZIHUI_BUTTON,this);
	m_btn.SetIcon(IDI_ICON1);
	//m_btn.SetFlat (FALSE);
	m_btn.DrawBorder (FALSE);
	m_btn.SetColor (CButtonST::BTNST_COLOR_BK_OUT, RGB(r,g,b));
	m_btn.SetColor (CButtonST::BTNST_COLOR_BK_IN, RGB(r,g,b));
	m_btn.SetColor (CButtonST::BTNST_COLOR_BK_FOCUS, RGB(r,g,b));

	m_btnOk.SetColor(CButtonST::BTNST_COLOR_BK_IN ,RGB(255,0,0));
	m_btnOk.SetColor(CButtonST::BTNST_COLOR_BK_OUT ,RGB(255,0,0));
	m_btnOk.SetColor(CButtonST::BTNST_COLOR_BK_FOCUS ,RGB(255,0,0));




VC/MFC如何设置对话框背景颜色


方法一：调用CWinApp类的成员函数SetDialogBkColor来实现。  (这个函数已经废弃)

1 

void SetDialogBkColor(COLORREF clrCtlBk = RGB(192, 192, 192), COLORREF clrCtlText = RGB(0, 0, 0)); 


其中函数的第一个参数指定了背景颜色，第二个参数指定了文本颜色。

在InitInstance()中添加如下代码：  


1 

SetDialogBkColor(RGB(0,0,255),RGB(255,0,0)); 


值得注意的是：在调用DoModal()之前必须先调用SetDialogBkColor。


这种方法经过笔者验证，并不能改变对话框背景

方法二：重载OnPaint()，即WM_PAINT消息




CRect   rect;  

 CPaintDC   dc(this);  

 GetClientRect(rect);  

 dc.FillSolidRect(rect,RGB(0,255,0));   //设置为绿色背景 


方法三：重载OnCtlColor   (CDC*   pDC,   CWnd*   pWnd,   UINT   nCtlColor)，即WM_CTLCOLOR消息

.h头文件添加 CBrush  m_brush;

.cpp源文件添加 m_brush.CreateSolidBrush(RGB(255,0,0));




OnCtlColor(CDC*   pDC,   CWnd*   pWnd,   UINT   nCtlColor)    

{  

/*  下行代码要注释掉  

     HBRUSH   hbr   =   CDialog::OnCtlColor(pDC,   pWnd,   nCtlColor);  

*/ 

return   m_brush;   //返加红色刷子  

} 


方法四：还是重载OnCtlColor   (CDC*   pDC,   CWnd*   pWnd,   UINT   nCtlColor)， 即WM_CTLCOLOR消息

.h头文件添加 CBrush m_brush;

.cpp源文件添加 m_brush.CreateSolidBrush(RGB(255,0,0));







OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor) 

  {  

  HBRUSH   hbr   =   CDialog::OnCtlColor(pDC,   pWnd,   nCtlColor);  

  //在这加一条是否为对话框的判断语句  

     if(nCtlColor   ==CTLCOLOR_DLG)  

        return   m_brush;   //返加红色刷子  

  return   hbr;  

  } 


可以根据不同的控件类型返回不同的画刷，来实现不同控件颜色的设置  



CTLCOLOR_BTN                按钮控件

 CTLCOLOR_DLG                对话框

 CTLCOLOR_EDIT               编辑框

 CTLCOLOR_LISTBOX            列表控件

 CTLCOLOR_MSGBOX             消息控件

 CTLCOLOR_SCROLLBAR          滚动条控件

 CTLCOLOR_STATIC             静态控件 








1 


这里大家要注意，OnCtlColor能改变Static等子控件的颜色，对于Button必须设置其属性Owner Draw为True,才能改变Button按钮背景色（CButton 文本的字体颜色并不能通过SetBkColor来改变，需要自己重绘CButton，在DrawItem中进行实现。 

HBRUSH CXXXDlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)

{

 HBRUSH hbr = CDialog::OnCtlColor(pDC, pWnd, nCtlColor);

 // TODO:  在此更改 DC 的任何属性

 if(nCtlColor==CTLCOLOR_BTN)          //更改按钮颜色
 {
  //pDC->SetBkMode(TRANSPARENT);//TRANSPARENT是使用透明的输出 OPAQUE的方式是用当前背景的画刷的颜色输出显示文字的背景
  pDC->SetTextColor(RGB(0,0,0));
  pDC->SetBkColor(RGB(121,121,255));   
  HBRUSH b=CreateSolidBrush(RGB(121,121,255));
  return b;
 }

 else if(nCtlColor==CTLCOLOR_SCROLLBAR)  //

 {

  //pDC->SetBkMode(TRANSPARENT);

  pDC->SetTextColor(RGB(0,0,0));

  pDC->SetBkColor(RGB(233,233,220));

  HBRUSH b=CreateSolidBrush(RGB(233,233,220));

  return b;

 }

 else if(nCtlColor==CTLCOLOR_EDIT)   //更改编辑框

 {

  //pDC->SetBkMode(TRANSPARENT);

  pDC->SetTextColor(RGB(0,0,0));

  pDC->SetBkColor(RGB(165,254,236));

  HBRUSH b=CreateSolidBrush(RGB(165,254,236));

  return b;

 }

 else if(nCtlColor==CTLCOLOR_STATIC)  //更改静态文本
 {
  pDC->SetTextColor(RGB(0,0,0));
  pDC->SetBkColor(RGB(166,254,1));
  HBRUSH b=CreateSolidBrush(RGB(166,254,1));
  return b;
 }

 else if(nCtlColor==CTLCOLOR_DLG)   //更改对话框背景色
 {
  pDC->SetTextColor(RGB(0,0,0));
  pDC->SetBkColor(RGB(166,254,1));
  HBRUSH b=CreateSolidBrush(RGB(166,254,1));
  return b;
 }

 // TODO:  如果默认的不是所需画笔，则返回另一个画笔


、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
1。长度限制
OnInitDialog()中：
m_edit1.SetLimitText(8);                           //m_edit1为编辑框的成员变量
 或者
CEdit*pEdt=(CEdit*)GetDlgItem(IDC_EDIT1);
 pEdt->SetLimitText(8);                              //限制编辑框输入长度为8字节
2。汉字判断
 方法一、
CString str="ab你c好。。";
for(int i=0;i<str.GetLength();i++)
 {
 if(   (BYTE)str[i]   <   0x80 ) 
 {   
       MessageBox("非汉字"); 
 }       
else//汉字   
 {   
     MessageBox("是汉字");
 }                                                                    //方法不好，只能判断有没有汉字
 方法二、
CString   ss="dd你aa今bb真cc";
 int i=0;
 while(i<ss.GetLength())
 {
    if(IsDBCSLeadByte(ss[i]))
     {
       //   是DBCS
        i += 2;
       AfxMessageBox("汉字");
       }
       else
     {
        //   英文
      i ++;
      AfxMessageBox("English");
     }
    }
 3。字体及大小
 定义一全局变量或成员变量CFont   font;                                        //不要定义成局部变量，否则没效果
CEdit*pEdt=(CEdit*)GetDlgItem(IDC_EDIT1);
 font.CreatePointFont(266,"Arial");
 pEdt->SetFont(&font);
 4。背景及文本颜色
 定义一成员变量CBrush m_brush;
 OnInitDialog()中进行初始化工作m_brush.CreateSolidBrush(RGB(255,0,0));
然后在OnCtrlColor中
HBRUSH CAsdfaaaaaaaaaDlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor) 
 {
 HBRUSH hbr = CDialog::OnCtlColor(pDC, pWnd, nCtlColor);
 if(nCtlColor==CTLCOLOR_EDIT &&
                           pWnd->GetDlgCtrlID()==IDC_EDIT1)//注意此处的（pWnd->），否则没效果
{
    pDC->SetTextColor(RGB(255,0,0));
    pDC->SetBkColor(RGB(255,255,0));//设置文本背景色
   pDC->SetBkMode(TRANSPARENT);//设置背景透明
   hbr = (HBRUSH)m_brush;
 }
 return hbr;
 }
对于nCtlColor的类型，如下：
CTLCOLOR_BTN    Button control 
 CTLCOLOR_DLG    Dialog box 
 CTLCOLOR_EDIT    Edit control 
 CTLCOLOR_LISTBOX    List-box control 
 CTLCOLOR_MSGBOX    Message box 
 CTLCOLOR_SCROLLBAR    Scroll-bar control 
 CTLCOLOR_STATIC    Static control 

 return hbr;

}