在Dlg头文件中public加入：

 CBrush m_bkBrush;  
  
 afx_msg HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor);





// 在OnInitDialog()中

创建一把黄色的背景刷子   
m_bkBrush.CreateSolidBrush(RGB(255,180,100)); 

设置对话框透明度
::SetWindowLong( m_hWnd, GWL_EXSTYLE, GetWindowLong(m_hWnd, GWL_EXSTYLE) | WS_EX_LAYERED);  
::SetLayeredWindowAttributes( m_hWnd, 0, 200, LWA_ALPHA); // 120是透明度，范围是0～255  





编辑OnCtlColor函数

HBRUSH C改变对话框背景色、透明度Dlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
 {
HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);
if(nCtlColor == CTLCOLOR_DLG)   // 判断是否是对话框  
{  
return   m_bkBrush; // 返回刚才创建的背景刷子  
}  
// TODO:  如果默认的不是所需画笔，则返回另一个画笔
return hbr;
 }



好在MFC的消息处理也比较方便，在Class View视图中找到对话框类（一般以Dlg结尾），右键，然后点击打开Class Wizard（Ctrl+Shift+x也可以打开），在Messages这一栏找到WM_CTLCOLOR这个消息，双击，然后确定，VS就会自动生成这个消息的处理函数了。
先不理这个函数，在对话框类中增加一个CBrush类型的成员变量（我的起名m_hBrush），然后在OnInitDialog函数中调用CreateSolidBrush方法生成画刷，该方法的参数即画刷的颜色。然后把刚才VS生成的消息处理函数中乱七八糟的东西都删掉，只保留HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);这一句，然后加一个return m_hBrush;
大功告成。